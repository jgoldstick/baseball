diff --git a/baseball_stats/baseball/.admin.py.swp b/baseball_stats/baseball/.admin.py.swp
deleted file mode 100644
index 047abe8..0000000
Binary files a/baseball_stats/baseball/.admin.py.swp and /dev/null differ
diff --git a/baseball_stats/baseball/.models.py.swo b/baseball_stats/baseball/.models.py.swo
index 3614bea..5bbc099 100644
Binary files a/baseball_stats/baseball/.models.py.swo and b/baseball_stats/baseball/.models.py.swo differ
diff --git a/baseball_stats/baseball/admin.py b/baseball_stats/baseball/admin.py
index 364ab5d..518e545 100644
--- a/baseball_stats/baseball/admin.py
+++ b/baseball_stats/baseball/admin.py
@@ -27,9 +27,9 @@ class TeamFranchiseAdmin(admin.ModelAdmin):
 admin.site.register(TeamFranchise, TeamFranchiseAdmin)
 
 class HallOfFameAdmin(admin.ModelAdmin):
-    list_display = ('player', 'year', 'voted_by', 'votes_needed', 'votes_received', 'inducted', 'category')
-    list_filter = ('year', 'inducted', 'player')
-    search_fields = ('player',)
+    list_display = ('player', 'year', 'voted_by', 'votes_needed', 'votes_received', 'percent_vote', 'inducted', 'category')
+    list_filter = ('inducted',)
+    search_fields = ('player__name_last','player__name_first')
         
 admin.site.register(HallOfFame, HallOfFameAdmin)
 
diff --git a/baseball_stats/baseball/admin.pyc b/baseball_stats/baseball/admin.pyc
index cb36f81..b18da42 100644
Binary files a/baseball_stats/baseball/admin.pyc and b/baseball_stats/baseball/admin.pyc differ
diff --git a/baseball_stats/baseball/models.py b/baseball_stats/baseball/models.py
index 99defe8..ebf95f1 100644
--- a/baseball_stats/baseball/models.py
+++ b/baseball_stats/baseball/models.py
@@ -63,7 +63,7 @@ class TeamFranchise(models.Model):
 class Team(models.Model):
     year = models.IntegerField()
     league = models.CharField(max_length=4)
-    team = models.CharField(max_length=4)
+    team = models.CharField(max_length=4, primary_key=True)
     franchise = models.ForeignKey(TeamFranchise)
     division = models.CharField(max_length=2, blank=True)
     rank = models.IntegerField()
@@ -117,8 +117,7 @@ class Batting(models.Model):
     player = models.ForeignKey(Master)
     year = models.IntegerField()
     stint = models.IntegerField()
-    #team = models.ForeignKey(TeamFranchise)
-    team = models.CharField(max_length=4)
+    team = models.ForeignKey(TeamFranchise)
     league = models.CharField(max_length=10)
     games = models.IntegerField()
     games_batting = models.IntegerField()
@@ -143,17 +142,6 @@ class Batting(models.Model):
     def __unicode__(self):
         return "%s %s %s" % (self.player.name_first, self.player.name_last, self.team)
 
-    @property
-    def team_name(self):
-        return Team.objects.get(team=self.team, year=self.year).team_name
-
-    @property
-    def average(self):
-        try:
-            return float(self.hits)/self.at_bats
-        except:
-            return None
-
     class Meta:
         verbose_name_plural = "Batting"
 
@@ -162,8 +150,7 @@ class Pitching(models.Model):
     player = models.ForeignKey(Master)
     year = models.IntegerField()
     stint = models.IntegerField()
-    #team = models.ForeignKey(TeamFranchise)
-    team = models.CharField(max_length=4)
+    team = models.ForeignKey(TeamFranchise)
     league = models.CharField(max_length=10)
     wins = models.IntegerField()
     losses = models.IntegerField()
@@ -197,62 +184,6 @@ class Pitching(models.Model):
         verbose_name_plural = "Pitching"
 
 
-class Fielding(models.Model):
-    player = models.ForeignKey('Master')
-    year = models.IntegerField()
-    stint = models.IntegerField()
-    team = models.CharField(max_length=4)
-    league = models.CharField(max_length=10)
-    position = models.CharField(max_length=30)
-    games = models.IntegerField()
-    games_started = models.IntegerField(blank=True, null=True)
-    outs_played = models.IntegerField(blank=True, null=True)
-    putouts = models.IntegerField(blank=True, null=True)
-    assists = models.IntegerField(blank=True, null=True)
-    errors = models.IntegerField(blank=True, null=True)
-    double_plays = models.IntegerField(blank=True, null=True)
-    passed_balls = models.IntegerField(blank=True, null=True)
-    wild_pitches = models.IntegerField(blank=True, null=True)
-    stolen_on = models.IntegerField(blank=True, null=True)
-    caught_stealing = models.IntegerField(blank=True, null=True)
-    zone_rating = models.IntegerField(blank=True, null=True)
-
-    def __unicode__(self):
-        return "%s %s" % (self.player.name_first, self.player.name_last)
-
-    class Meta:
-        verbose_name_plural = "Fielding"
-
-class Appearances(models.Model):
-    year = models.IntegerField()
-    team = models.CharField(max_length=4)
-    league = models.CharField(max_length=10)
-    player = models.ForeignKey(Master)
-    games = models.IntegerField(null=True)
-    games_started = models.IntegerField(null=True)
-    games_batted = models.IntegerField(null=True)
-    games_defense = models.IntegerField(null=True)
-    games_p = models.IntegerField(null=True)
-    games_c = models.IntegerField(null=True)
-    games_1b = models.IntegerField(null=True)
-    games_2b = models.IntegerField(null=True)
-    games_3b = models.IntegerField(null=True)
-    games_ss = models.IntegerField(null=True)
-    games_lf = models.IntegerField(null=True)
-    games_cf = models.IntegerField(null=True)
-    games_rf = models.IntegerField(null=True)
-    games_of = models.IntegerField(null=True)
-    games_dh = models.IntegerField(null=True)
-    games_ph = models.IntegerField(null=True)
-    games_pr = models.IntegerField(null=True)
-    
-    def __unicode__(self):
-        return "%s %s" % (self.player.name_first, self.player.name_last)
-
-    class Meta:
-        verbose_name_plural = "Appearances"
-
-
 class HallOfFame(models.Model):
     player = models.ForeignKey(Master)
     year = models.IntegerField(db_index=True)
@@ -267,9 +198,10 @@ class HallOfFame(models.Model):
 
     def __unicode__(self):
         return "%s %s" % (self.player.name_first, self.player.name_last) 
+
+    def percent_vote(self):
+        return float(self.votes_received)/self.ballots_cast
     
     class Meta:
         verbose_name_plural = "Hall of Famers"
 
-
-
diff --git a/baseball_stats/baseball/models.pyc b/baseball_stats/baseball/models.pyc
index 46d3f20..5fcd6ac 100644
Binary files a/baseball_stats/baseball/models.pyc and b/baseball_stats/baseball/models.pyc differ
diff --git a/baseball_stats/baseball/views.py b/baseball_stats/baseball/views.py
index 91ea44a..6875298 100644
--- a/baseball_stats/baseball/views.py
+++ b/baseball_stats/baseball/views.py
@@ -1,3 +1,9 @@
-from django.shortcuts import render
+from django.shortcuts import render_to_response, get_object_or_404
+from baseball.models import HallOfFame
 
 # Create your views here.
+
+def home(request):
+    hall =  HallOfFame.objects.filter(inducted=True)[:20]	
+    #hall_list = list(hall).sort(hall.year)
+    return render_to_response('top_lists.html', {'hall': hall, 'hall_list': hall_list})
diff --git a/baseball_stats/baseball_stats/settings.py b/baseball_stats/baseball_stats/settings.py
index ebb160e..c900748 100644
--- a/baseball_stats/baseball_stats/settings.py
+++ b/baseball_stats/baseball_stats/settings.py
@@ -11,7 +11,9 @@ https://docs.djangoproject.com/en/1.6/ref/settings/
 # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
 import os
 BASE_DIR = os.path.dirname(os.path.dirname(__file__))
-
+TEMPLATE_DIRS = (
+    os.path.join(BASE_DIR, "templates"),
+)
 
 # Quick-start development settings - unsuitable for production
 # See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/
diff --git a/baseball_stats/baseball_stats/settings.pyc b/baseball_stats/baseball_stats/settings.pyc
index a617773..0c03026 100644
Binary files a/baseball_stats/baseball_stats/settings.pyc and b/baseball_stats/baseball_stats/settings.pyc differ
diff --git a/baseball_stats/baseball_stats/settings.py~ b/baseball_stats/baseball_stats/settings.py~
index 49d3cf6..191f6cf 100644
--- a/baseball_stats/baseball_stats/settings.py~
+++ b/baseball_stats/baseball_stats/settings.py~
@@ -11,7 +11,7 @@ https://docs.djangoproject.com/en/1.6/ref/settings/
 # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
 import os
 BASE_DIR = os.path.dirname(os.path.dirname(__file__))
-
+TEMPLATE_DIRS = os.path.join(BASE_DIR, "templates"),
 
 # Quick-start development settings - unsuitable for production
 # See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/
@@ -83,6 +83,7 @@ USE_TZ = True
 
 STATIC_URL = '/static/'
 
+"""
 LOGGING = {
     'version': 1,
     'handlers': {
@@ -98,4 +99,4 @@ LOGGING = {
         },
     }
 }
-
+"""
diff --git a/baseball_stats/baseball_stats/urls.py b/baseball_stats/baseball_stats/urls.py
index b00fd0a..cb2e90a 100644
--- a/baseball_stats/baseball_stats/urls.py
+++ b/baseball_stats/baseball_stats/urls.py
@@ -1,12 +1,13 @@
 from django.conf.urls import patterns, include, url
 
 from django.contrib import admin
+import baseball_stats
 admin.autodiscover()
 
 urlpatterns = patterns('',
     # Examples:
-    # url(r'^$', 'baseball_stats.views.home', name='home'),
     # url(r'^blog/', include('blog.urls')),
-
     url(r'^admin/', include(admin.site.urls)),
+    url(r'^stats/', include('baseball.urls')),
+    url(r'^/', include('baseball.urls')),
 )
diff --git a/baseball_stats/baseball_stats/urls.pyc b/baseball_stats/baseball_stats/urls.pyc
index 877fb26..e7844f9 100644
Binary files a/baseball_stats/baseball_stats/urls.pyc and b/baseball_stats/baseball_stats/urls.pyc differ
diff --git a/baseball_stats/db.sqlite3 b/baseball_stats/db.sqlite3
index 5ffcc99..62600db 100644
Binary files a/baseball_stats/db.sqlite3 and b/baseball_stats/db.sqlite3 differ
